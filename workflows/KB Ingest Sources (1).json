{
  "name": "KB Ingest Sources",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -464,
        -464
      ],
      "id": "144c776c-3f3c-42c8-89da-01c63b37698c",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "fileSelector": "/data/kb/inbox/*.pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -240,
        -464
      ],
      "id": "cbadfe71-01c5-4d1f-ba98-2c9393602a81",
      "name": "Read KB Inbox PDF"
    },
    {
      "parameters": {
        "command": "=sha256sum \"/data/kb/inbox/{{$json[\"fileName\"]}}\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        0,
        -464
      ],
      "id": "7bb75386-520a-4921-b3c9-faf9adcdd3f1",
      "name": "Hash File (sha256sum)"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH ins AS (\n  INSERT INTO kb_sources (source_name, source_type, source_path, hash)\n  VALUES (\n    '{{$json.filename}}',\n    'pdf',\n    '{{$json.src_path}}',\n    '{{ ($node[\"Hash File (sha256sum)\"]?.json?.stdout || \"\").split(/\\s+/)[0] || \"\" }}'\n  )\n  ON CONFLICT (hash) DO NOTHING\n  RETURNING source_id\n)\nSELECT \n  COALESCE(\n    (SELECT source_id FROM ins),\n    (SELECT source_id FROM kb_sources WHERE hash = '{{ ($node[\"Hash File (sha256sum)\"]?.json?.stdout || \"\").split(/\\s+/)[0] || \"\" }}')\n  ) AS source_id,\n  (SELECT COUNT(*) > 0 FROM ins) AS inserted,\n  '{{$json.filename}}'::text AS filename,\n  '{{$json.src_path}}'::text AS src_path;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        256,
        -256
      ],
      "id": "1e608a31-d2a3-4ab8-8fdc-f14ef0250882",
      "name": "Insert KB Source",
      "credentials": {
        "postgres": {
          "id": "j4uy2P7wwsJyISqB",
          "name": "Postgres DrAI"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "ee10d623-1d88-459d-b1b4-452f670f46da",
              "leftValue": "={{$json.inserted}}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        272,
        0
      ],
      "id": "0754ee29-729a-457a-b5fb-90e7da9c16d5",
      "name": "Check Insert"
    },
    {
      "parameters": {
        "command": "={{ (() => {\n  const src = String($json.src_path || $json.path || $json.filePath || $json.file || '').trim();\n  const dest = String($json.clean_dest_path || $json.dest_path || '').trim();\n  if (!src || !dest) {\n    throw new Error('Missing source/dest path for move');\n  }\n  const parts = dest.split('/');\n  if (parts.length > 1) {\n    parts.pop();\n  }\n  const destDir = parts.join('/') || '/data/kb/processed';\n  return `mkdir -p \"${destDir}\" && mv \"${src}\" \"${dest}\"`;\n})() }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1072,
        192
      ],
      "id": "1bfa2d87-418e-4562-b4ee-e52b4ab212c2",
      "name": "Move to Processed"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "072847c7-561d-4b59-9b29-71e74c630dab",
              "name": "filename",
              "value": "={{ String($json.fileName || $json.filename || (($node[\"Hash File (sha256sum)\"].json.stdout || '').split(/\\s+/).pop().split('/').pop())).replace(/\\r?\\n/g, ' ').trim() }}",
              "type": "string"
            },
            {
              "id": "d188cb3c-35f2-4ed1-9d54-84ba63af468c",
              "name": "hash",
              "value": "={{ String(((( $node[\"Hash File (sha256sum)\"].json.stdout || '' ).split(/\\s+/)[0]) || '')).trim() }}\n",
              "type": "string"
            },
            {
              "id": "e70351ed-c745-499a-a0d5-997efbed6749",
              "name": "src_path",
              "value": "={{ String($json.path || $json.filePath || $json.file || (($node[\"Hash File (sha256sum)\"].json.stdout || '').split(/\\s+/).pop())).replace(/\\r?\\n/g, ' ').trim() }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        32,
        -272
      ],
      "id": "dac4815a-b676-46d3-b87c-bdbdf5185067",
      "name": "Assemble Meta"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0dfe3c00-84ab-4396-9d04-76af1ce54b58",
              "name": "dest_name",
              "value": "={{\n  (\n    String($json.filename || $json.fileName || 'file.pdf').trim()\n      .normalize('NFD').replace(/[\\u0300-\\u036f]/g,'') // sin tildes\n      .replace(/\\.pdf$/i,'')                           // quita .pdf\n      .replace(/\\s+/g,'_')                             // espacios -> _\n      .replace(/[^A-Za-z0-9_.-]/g,'')                  // limpia raros\n  ) + '_' + $now.toFormat('yyyyLLdd_HHmmss') + '.pdf'\n}}\n",
              "type": "string"
            },
            {
              "id": "eeee301b-551a-4c10-8962-bff072850d7f",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        512,
        0
      ],
      "id": "365fe974-e8e0-480b-94cd-4ca7c20a688d",
      "name": "Plan Move Name"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE kb_sources\n   SET source_path = {{ (() => {\n  const value = String($json.clean_dest_path ?? '').trim();\n  if (!value) {\n    return 'NULL';\n  }\n  return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n})() }}\n WHERE source_id = {{ (() => {\n  const numeric = Number($json.clean_source_id);\n  return Number.isFinite(numeric) && numeric > 0 ? numeric : -1;\n})() }};\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2528,
        192
      ],
      "id": "9f19d4fe-0fd8-40cb-8749-67fcbb646a62",
      "name": "Update Source Path",
      "credentials": {
        "postgres": {
          "id": "j4uy2P7wwsJyISqB",
          "name": "Postgres DrAI"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0d9bbd3-2c22-46d7-b4f5-dd784397b3af",
              "name": "dest_path",
              "value": "={{ '/data/kb/processed/' + String($json.dest_name || '').trim() }}\n",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        0
      ],
      "id": "3cb47945-9615-4247-83eb-9944612da506",
      "name": "Build Dest Path"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "82f13283-c4c6-4481-81b5-6b2d03356f04",
              "leftValue": "={{$json.inserted}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        864,
        176
      ],
      "id": "b8c0e097-f841-4c05-803b-1a0a5692545f",
      "name": "Guardarraíl antes de mover"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6ea377cd-2a44-4d83-b516-59ad50ac69ef",
              "name": "clean_source_id",
              "value": "={{ (() => {\n  const candidates = [$json.source_id, $json.rows?.[0]?.source_id];\n  for (const raw of candidates) {\n    const numeric = Number(String(raw ?? '').replace(/\\r?\\n/g, '').trim());\n    if (Number.isFinite(numeric) && numeric > 0) {\n      return numeric;\n    }\n  }\n  return -1;\n})() }}",
              "type": "number"
            },
            {
              "id": "5d71566e-ef5c-4da5-96b8-8a4ea92a867e",
              "name": "clean_dest_path",
              "value": "={{ (() => {\n  const sanitizePath = (value) => String(value ?? '').replace(/\\r?\\n/g, '').trim();\n  const rawDest = sanitizePath($json.dest_path);\n  if (rawDest) {\n    return rawDest;\n  }\n  const baseName = sanitizePath($json.dest_name);\n  if (baseName) {\n    return '/data/kb/processed/' + baseName;\n  }\n  const primaryName = sanitizePath($json.filename) || sanitizePath($json.fileName) || 'file';\n  const fallback = primaryName\n    .normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/\\.pdf$/i, '')\n    .replace(/\\s+/g, '_')\n    .replace(/[^A-Za-z0-9_.-]/g, '');\n  const safeName = (fallback || 'file') + '_' + $now.toFormat('yyyyLLdd_HHmmss') + '.pdf';\n  return '/data/kb/processed/' + safeName;\n})() }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1264,
        192
      ],
      "id": "f21c39d3-b25a-47fe-aa9c-8347bb2cd086",
      "name": "Coerce For Update"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "57c08b34-a357-4f92-ad20-fd247e126a8a",
              "leftValue": "={{$json.clean_dest_path}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "6df4a3c6-90de-4248-9959-7cc178abecdd",
              "leftValue": "={{ Number(String($json.clean_source_id).trim()) }}\n",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2320,
        192
      ],
      "id": "efe0b563-f1b8-4be5-a6fa-846d136985d0",
      "name": "IF guardarraíl (antes del Update)"
    },
    {
      "parameters": {
        "command": "=python3 - <<'PY'\nimport json\nimport re\nimport subprocess\nimport sys\n\npdf_path = {{ JSON.stringify((String($json.clean_dest_path || $json.dest_path || '').trim())) }}\nif not pdf_path:\n    print(json.dumps({'error': 'missing_pdf_path', 'chunks': []}))\n    sys.exit(0)\ncmd = ['pdftotext', '-layout', '-enc', 'UTF-8', pdf_path, '-']\ntry:\n    proc = subprocess.run(cmd, capture_output=True, text=True, check=True)\nexcept FileNotFoundError:\n    print(json.dumps({'error': 'pdftotext_not_found', 'chunks': []}))\n    sys.exit(0)\nexcept subprocess.CalledProcessError as exc:\n    print(json.dumps({\n        'error': 'pdftotext_failed',\n        'stderr': (exc.stderr or '').strip(),\n        'returncode': exc.returncode,\n        'chunks': []\n    }))\n    sys.exit(0)\ntext = proc.stdout or ''\ntext_stripped = text.strip()\npages_raw = [page for page in text.split('\\f') if page.strip()]\nchunks = []\nchunk_index = 0\nmax_chunk = 1200\nmin_chunk = 180\nfor page_number, raw_page in enumerate(pages_raw, start=1):\n    page_text = raw_page.strip()\n    if not page_text:\n        continue\n    paragraphs = [p.strip() for p in re.split(r'\\n\\s*\\n+', page_text) if p.strip()]\n    buffer = ''\n    for para in paragraphs:\n        segments = [para[i:i + max_chunk] for i in range(0, len(para), max_chunk)] or ['']\n        for segment in segments:\n            piece = segment.strip()\n            if not piece:\n                continue\n            candidate = f\"{buffer}\\n\\n{piece}\".strip() if buffer else piece\n            if len(candidate) <= max_chunk:\n                buffer = candidate\n            else:\n                if buffer:\n                    chunk_index += 1\n                    chunks.append({'chunk_index': chunk_index, 'page_number': page_number, 'content': buffer})\n                buffer = piece\n    if buffer:\n        if len(buffer) < min_chunk and chunks:\n            chunks[-1]['content'] = f\"{chunks[-1]['content']}\\n\\n{buffer}\".strip()\n        else:\n            chunk_index += 1\n            chunks.append({'chunk_index': chunk_index, 'page_number': page_number, 'content': buffer})\nresult = {\n    'chunks': chunks,\n    'page_count': len(pages_raw),\n    'text_length': len(text_stripped),\n    'ocr_suspect': len(text_stripped) < 80\n}\nprint(json.dumps(result, ensure_ascii=False))\nPY"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1440,
        192
      ],
      "id": "efc18fed-261e-44da-b48c-ccec0a0197bf",
      "name": "Extract PDF text & chunk"
    },
    {
      "parameters": {
        "functionCode": "const item = items[0] || { json: {} };\nconst raw = item.json.stdout || '';\nlet parsed = {};\nif (raw) {\n  try {\n    parsed = JSON.parse(raw);\n  } catch (error) {\n    throw new Error('Chunk command did not return JSON: ' + raw.slice(0, 400));\n  }\n}\nconst chunks = Array.isArray(parsed.chunks) ? parsed.chunks : [];\nitem.json.chunkData = parsed;\nitem.json.chunkCount = chunks.length;\nitem.json.chunkError = parsed.error || null;\nitem.json.needsOcr = Boolean(parsed.ocr_suspect) || chunks.length === 0 || Boolean(item.json.chunkError);\nitem.json.hasChunks = !item.json.needsOcr && chunks.length > 0;\nitem.json.chunkStdErr = parsed.stderr || null;\nitem.json.chunkTextLength = parsed.text_length ?? null;\nreturn items;"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1616,
        192
      ],
      "id": "852a4fad-c51b-4890-8e56-38d08b6aa4bb",
      "name": "Parse chunk output"
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "id": "d2ba6767-a98f-42b2-8a9b-01d61cf482ee",
              "leftValue": "={{$json.hasChunks}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and",
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          }
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1792,
        192
      ],
      "id": "e22bf642-c090-4082-b67c-4e6e43b947cd",
      "name": "Chunks disponibles?"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fd062400-ac13-442d-b8f1-1f97ed355161",
              "name": "chunks_json",
              "value": "={{ JSON.stringify($json.chunkData?.chunks || []).replace(/'/g, \"''\") }}",
              "type": "string"
            },
            {
              "id": "4ec1e9d6-3eff-4a75-a086-d15e5ef73e00",
              "name": "chunk_count",
              "value": "={{ $json.chunkCount || 0 }}",
              "type": "number"
            },
            {
              "id": "9a53f25d-3dbd-4a94-b24f-87b70d30d524",
              "name": "chunk_text_length",
              "value": "={{ $json.chunkTextLength || 0 }}",
              "type": "number"
            },
            {
              "id": "68d4d0c8-fdc2-4261-bd4f-a036de00840c",
              "name": "page_count",
              "value": "={{ $json.chunkData?.page_count || 0 }}",
              "type": "number"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1968,
        96
      ],
      "id": "0d3b82af-d868-468f-b326-49e1be0d35e0",
      "name": "Preparar payload de chunks"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM kb_chunks\n WHERE source_id = {{$json.clean_source_id}};\n\nWITH incoming AS (\n  SELECT\n    (chunk->>'chunk_index')::int AS chunk_index,\n    (chunk->>'page_number')::int AS page_number,\n    trim(chunk->>'content') AS content\n  FROM jsonb_array_elements('{{$json.chunks_json}}'::jsonb) AS chunk\n),\ninserted AS (\n  INSERT INTO kb_chunks (source_id, chunk_index, page_number, content)\n  SELECT\n    {{$json.clean_source_id}} AS source_id,\n    chunk_index,\n    page_number,\n    content\n  FROM incoming\n  ORDER BY chunk_index\n  RETURNING 1\n)\nSELECT\n  {{$json.clean_source_id}}::int       AS clean_source_id,\n  '{{ String($json.clean_dest_path || '').replace(/'/g, \"''\") }}'::text AS clean_dest_path,\n  {{$json.chunk_count || 0}}::int      AS chunk_count,\n  {{$json.chunk_text_length || 0}}::int AS chunk_text_length,\n  {{$json.page_count || 0}}::int       AS page_count;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2144,
        96
      ],
      "id": "8f56cb2d-fd7e-47b8-b607-524eb38c283c",
      "name": "Refrescar kb_chunks",
      "credentials": {
        "postgres": {
          "id": "j4uy2P7wwsJyISqB",
          "name": "Postgres DrAI"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f52dde17-fafe-4b04-a398-9d2d8a147dca",
              "name": "chunk_warning",
              "value": "={{ $json.chunkError ? ('Extracción fallida: ' + $json.chunkError) : 'Se detectó PDF sin texto utilizable (revisar OCR)' }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1968,
        304
      ],
      "id": "904de846-5fb0-45b8-a869-aad9ddb4bed7",
      "name": "Marcar necesidad de OCR"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Read KB Inbox PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read KB Inbox PDF": {
      "main": [
        [
          {
            "node": "Hash File (sha256sum)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hash File (sha256sum)": {
      "main": [
        [
          {
            "node": "Assemble Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert KB Source": {
      "main": [
        [
          {
            "node": "Check Insert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Insert": {
      "main": [
        [
          {
            "node": "Plan Move Name",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Plan Move Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assemble Meta": {
      "main": [
        [
          {
            "node": "Insert KB Source",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Plan Move Name": {
      "main": [
        [
          {
            "node": "Build Dest Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move to Processed": {
      "main": [
        [
          {
            "node": "Coerce For Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Dest Path": {
      "main": [
        [
          {
            "node": "Guardarraíl antes de mover",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardarraíl antes de mover": {
      "main": [
        [
          {
            "node": "Move to Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Coerce For Update": {
      "main": [
        [
          {
            "node": "Extract PDF text & chunk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF guardarraíl (antes del Update)": {
      "main": [
        [
          {
            "node": "Update Source Path",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Source Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF text & chunk": {
      "main": [
        [
          {
            "node": "Parse chunk output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse chunk output": {
      "main": [
        [
          {
            "node": "Chunks disponibles?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunks disponibles?": {
      "main": [
        [
          {
            "node": "Preparar payload de chunks",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Marcar necesidad de OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar payload de chunks": {
      "main": [
        [
          {
            "node": "Refrescar kb_chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refrescar kb_chunks": {
      "main": [
        [
          {
            "node": "IF guardarraíl (antes del Update)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Marcar necesidad de OCR": {
      "main": [
        [
          {
            "node": "IF guardarraíl (antes del Update)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2e24ab8b-8267-4dbf-9d00-79801360d579",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "26c5b7ffa6d42a43f69cb24f731969e90a1796cf64d2684e80f4305e5149b46e"
  },
  "id": "9O4yURBD1NH1LtP9",
  "tags": []
}
